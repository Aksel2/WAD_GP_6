//The easiest and by far most common way to use node-postgres is through a connection pool.
//The PostgreSQL server can only handle a limited number of clients at a time, and
// it can only process one query at a time on a single connected client in a first-in first-out manner.
//If your app is using only a single connected client all queries among all simultaneous requests will be pipelined and executed serially.
// The client pool allows you to have a reusable pool of clients you can check out, use, and return.

//node-postgres also has built-in support for promises throughout all of its async APIs.
//Promises allow us to use async/await in node v8.0 and above.

const Pool = require("pg").Pool;
const format = require("pg-format");
const sql = require("sql");
const posts = require("./data/posts.json");

// this code will work and a table will be created if you have already created the "testWad" database.
const pool = new Pool({
  user: "postgres",
  password: "123", // Enter your password here
  database: "testWad", //Try to use the same name for your database
  host: "localhost",
  port: "5432",
});

const execute = async (query) => {
  try {
    await pool.connect(); // gets connection
    await pool.query(query); // sends queries
    return true;
  } catch (error) {
    console.error(error.stack);
    return false;
  }
};

const insertPost = async (date, message, like) => {
  try {
    await pool.connect(); // gets connection
    await pool.query(
      `INSERT INTO "posts" ("date", "message","like")  
             VALUES ($1, $2, $3)`,
      [date, message, like]
    ); // sends queries
    return true;
  } catch (error) {
    console.error(error.stack);
    return false;
  } finally {
  }
};

// A simple query that creates a table in our database
// Note that the "SERIAL"  pseudo-type that is used after the "id" is used to create a sequence object,
// and set the next value generated by the sequence as the default value for the column

// 2 Tabelit - users (one to many) posts
const createUsersTableQuery = `
    CREATE TABLE IF NOT EXISTS "users" (
	    "id" SERIAL PRIMARY KEY,
	    "fullname" VARCHAR(200) NOT NULL,
	    "email" VARCHAR(200) NOT NULL,
	    "password" VARCHAR(200) NOT NULL,
	    "picture" VARCHAR(200)
    );`;

const createPostsTableQuery = `
    CREATE TABLE IF NOT EXISTS "posts" (
	    "id" SERIAL PRIMARY KEY,
        "date" DATE NOT NULL,
	    "message" VARCHAR(2000) NOT NULL,
	    "like" INTEGER NOT NULL
    );`;

// Helper function for looping trough json and inserting to poststable
const populatePostsTable = async () => {
  for (let i = 0; i < posts.length; i++) {
    let id = posts[i]["id"];
    let date = posts[i]["date"];
    let message = posts[i]["message"];
    let like = posts[i]["like"];

    await insertPost(date, message, like).then((result) => {
      if (result) {
        console.log("Post inserted");
      }
    });

    console.log("\nInserted", date, message, like, "to posts");
  }
};

execute(createPostsTableQuery).then((result) => {
  if (result) {
    console.log('If does not exists, create the "posts" table');
  }
  populatePostsTable();
});

execute(createUsersTableQuery).then((result) => {
  if (result) {
    console.log('If does not exists, create the "userstable" table');
  }
});

module.exports = pool;